plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

repositories {
    maven { url "https://maven.quiltmc.org/repository/release/" }
}

architectury {
    platformSetupLoomIde()
    loader("quilt")
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentQuilt.extendsFrom common
}

dependencies {
    modImplementation "org.quiltmc:quilt-loader:${rootProject.quilt_loader_version}"
    modApi "org.quiltmc.quilted-fabric-api:quilted-fabric-api:${rootProject.quilt_fabric_api_version}"
    // Remove the next few lines if you don't want to depend on the API
    modApi("dev.architectury:architectury-fabric:${rootProject.architectury_version}") {
        // We must not pull Fabric Loader from Architectury Fabric
        exclude group: "net.fabricmc"
        exclude group: "net.fabricmc.fabric-api"
    }

    include modApi("teamreborn:energy:2.3.0") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionQuilt")) { transitive false }
    common(project(path: ":fabric-like", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":fabric-like", configuration: "transformProductionQuilt")) { transitive false }
}

processResources {
    inputs.property "version", project.version
    inputs.property "mod_id", "${mod_id}"
    inputs.property "mod_name", "${mod_name}"
    inputs.property "mod_license", "${mod_license}"
    inputs.property "mod_description", "${mod_description}"
    inputs.property "mod_authors", "${mod_authors}"
    inputs.property "mod_group", project.group
    inputs.property "mod_source", "${mod_source}"

    filesMatching("quilt.mod.json") {
        expand (
                "version" : project.version,
                "mod_id" : "${mod_id}",
                "mod_name" : "${mod_name}",
                "mod_license" : "${mod_license}",
                "mod_description" : "${mod_description}",
                "mod_authors" : "${mod_authors}",
                "mod_group" : project.group,
                "mod_source" : "${mod_source}"
        )
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}
