plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.0.+" apply false
    id("org.jetbrains.changelog") version "2.0.0"
    id 'maven-publish'
}

architectury {
    minecraft = rootProject.minecraft_version

}

subprojects {
    apply plugin: "dev.architectury.loom"

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        // The following line declares the mojmap mappings, you may use other mappings as well
        mappings loom.officialMojangMappings()
        // The following line declares the yarn mappings you may select this one as well.
        // mappings "net.fabricmc:yarn:1.19.2+build.3:v2"
    }
}


allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"


    var modPlatformName = project.name[0].toUpperCase() + project.name.substring(1)

    archivesBaseName = rootProject.archives_base_name + "-" + modPlatformName
    version = minecraft_version + "-" + mod_version
    group = rootProject.maven_group

    repositories {
        // Add repositories to retrieve artifacts from in here.
        // You should only use this when depending on other mods because
        // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
        // See https://docs.gradle.org/current/userguide/declaring_repositories.html
        // for more information about repositories.
    }
    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId = "${project.mod_id}-${project.name}"
                version = version

                pom {
                    name = "${mod_name} [${modPlatformName}]"
                    description = "${mod_description}"
                    url = "${mod_source}"
                    scm {
                        url = "${mod_source}"
                        connection = "${mod_source}".replace("https", "scm:git:git").concat(".git")
                        developerConnection = "${mod_source}".replace("https://github.com/", "scm:git:git@github.com:").concat(".git")
                    }
                    issueManagement {
                        system = 'github'
                        url = "${mod_source}/issues"
                    }
                    licenses {
                        license {
                            name = 'MPL-2'
                            url = 'https://www.mozilla.org/en-US/MPL/2.0/'
                        }
                    }
                    developers {
                        developer {
                            id = "${mod_authors}".toLowerCase()
                            name = "${mod_authors}"
                        }
                    }
                }
                // this is necessary when not using 'from components.java', otherwise dependencies block will still be empty at this point
                afterEvaluate {
                    // exclude certain dependencies when publishing to maven
                    // from https://stackoverflow.com/a/50121790
                    pom.withXml {
                        asNode().dependencies.dependency.each { dep ->
                            // use this approach to make excluding dependencies from Curse Maven more convenient
                            if (["curse.maven:","dev.architectury:"].stream().anyMatch(mod -> "${dep.groupId.last().value().last()}:${dep.artifactId.last().value().last()}".startsWith(mod))) {
                                assert dep.parent().remove(dep)
                            } 
                        }
                    }
                }
                from components.java
            }
        }
        repositories {
            maven {
                name = 'GitHubPackages'
                url uri("$mod_mvngit_source")
                credentials{
                    username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
                    password = project.findProperty("gpr.token") ?: System.getenv("TOKEN")
                }
            }
        }
    }
    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.release = 17
    }

    java {
        withSourcesJar()
    }
}
